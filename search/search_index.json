{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#overview","title":"Overview","text":"<p>The SUTURO Knowledge stack is based on KnowRob, a knowledge processing system, which provides functionalities to represent knowledge and reasoning methods. We are using it to store, represent and infer rich information about the robots state and its environment.</p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#installation-guide","title":"Installation guide","text":"<p>Follow the installation guide to set up the SUTURO Knowledge system on your computer. TODO: Provide updated installation guide</p>"},{"location":"#recommended-code-editors","title":"Recommended code editors","text":"<ul> <li> <p>Emacs   If you want to edit Prolog with Emacs, use the following command in in the <code>src</code> directory:   <pre><code>find -iname '*.pl' -exec etags --lang=prolog {} +  \n</code></pre>   This will generate a TAGS file that Emacs can use to jump to the definition of a predicate.   You can also specify paths to be searched between <code>find</code> and <code>-iname</code>.   The following for example indexes everything from the folder 3 levels up:   <pre><code>find ../../.. -iname '*.pl' -exec etags --lang=prolog {} +\n</code></pre></p> </li> <li> <p>Visual Studio Code   Install the <code>VSC-Prolog</code> extension to get syntax highlighting and code completion for Prolog in VS Code.</p> </li> </ul>"},{"location":"objects/","title":"SUTURO Objects","text":"<p>This page lists all physical objects of the SUTURO ontology. </p>"},{"location":"objects/#downloads","title":"Downloads","text":""},{"location":"objects/#objects","title":"Objects","text":""},{"location":"planning-interface/","title":"Planning API Documentation","text":""},{"location":"planning-interface/#readers-guide","title":"Readers guide","text":"<p>Each code documentation section contains:</p> <ol> <li>A short description of a possible use case</li> <li>The definition of the predicate</li> <li>A codeblock with multiple examples, each one separated by 2 newlines</li> </ol> <p>The examples are in the following format:</p> <ol> <li><code>?-</code> followed by a query</li> <li>The variable instantiations that Prolog found.</li> </ol> <p>Meaning of the symbols in front of the parameter:</p> <ul> <li><code>?</code> means this can be specified (an input) or be a variable (an output)</li> <li><code>+</code> means this is only input (it has to be a concrete value)</li> <li><code>-</code> means this is output (only putting a variable here makes sense for planning)</li> </ul> <p>Meaning of the predicate behavior:  </p> <ul> <li><code>det</code> Succeeds exactly once without a choice point</li> <li><code>semidet</code> Fails or Succeeds exactly once without a choice-point</li> <li><code>nondet</code> May succeed any number of times (this means <code>cut:lazy-cdr</code> might be needed to get all values)</li> <li><code>multi</code> As <code>nondet</code>, but succeeds at least one time</li> </ul> <p>These definitions are the same as on https://www.swi-prolog.org/pldoc/man?section=modes.</p>"},{"location":"planning-interface/#high-level-concepts","title":"High-Level Concepts","text":"<p>In the following the high-level ideas for the exchange between Planning and Knowledge are described for the different challenges.</p> <p>To successfully utilize the Knowledge-Planning API, the following 4 predicates are important:</p> <ul> <li><code>create_object(-Object, +Type, +PoseStamped, +Options)</code>: Used to instantiate/create new, perceived objects</li> <li><code>object_rel_pose(+Object, +Type, +Options, -PoseStamped)</code>: Returns important poses for a given object (e.g. from where to perceive it or where to place it)</li> <li><code>predefined_origin_location(+Type, -Location)</code>: Returns the predefined location for a given object type (e.g. the predefined location of bowls is on inside of Shelf_FIFFJO)</li> <li><code>next_object(-Object)</code>: Returns the next best object to be processed/picked for a given challenge</li> </ul>"},{"location":"planning-interface/#serve-breakfast","title":"Serve Breakfast","text":""},{"location":"planning-interface/#storing-groceries","title":"Storing Groceries","text":""},{"location":"planning-interface/#clean-the-table","title":"Clean the Table","text":""},{"location":"planning-interface/#data-types","title":"Data types","text":""},{"location":"planning-interface/#typeclass","title":"Type/Class","text":"<p>An iri, for example <code>'http://www.ease-crc.org/ont/SOMA.owl#Table'</code> or the shortform <code>soma:'Table'</code> that denotes a class of objects.</p>"},{"location":"planning-interface/#object","title":"Object","text":"<p>An iri, for example <code>'http://www.ease-crc.org/ont/SOMA.owl#Table_MBOLQEWJ'</code> that denotes an individual object.</p>"},{"location":"planning-interface/#posestamped","title":"PoseStamped","text":"<p>A list of Frame, Position and Rotation. Position and Rotation are each a list of length 3 and 4.</p> <p><code>[Frame, [X, Y, Z], [RX, RY, RZ, RW]]</code></p>"},{"location":"planning-interface/#objects","title":"Objects","text":"<p>This section describes the predicates that are used to create and get information about objects. An object is any physical object that has a proper space region. Available objects types are defined in the SUTURO Objects.</p>"},{"location":"planning-interface/#create-an-object","title":"Create an object","text":"<p>Create an object of a given Type at the given PoseStamped.</p> <p>The <code>Type</code> can be the full IRI or the <code>namespace:'Name'</code> form.</p> <p>The Options that can be processed are:</p> <ul> <li><code>shape(ShapeTerm)</code> optional - The shape of the object. If not specified, Knowledge will have no shape information about this object.</li> <li><code>class_confidence</code> -  A confidence that a robot has about the recognition of objects</li> </ul> <pre><code>create_object(-Object, +Type, +PoseStamped) is det.\ncreate_object(-Object, +Type, +PoseStamped, +Options) is det.\n</code></pre> <p>Example: <pre><code>?- create_object(Object, 'http://www.ease-crc.org/ont/SOMA.owl#CerealBox', ['iai_kitchen/long_table:table:table_front_edge_center', [0,1,1], [0,0,0.70711,0.70711]]).\nObject: http://www.ease-crc.org/ont/SOMA.owl#CerealBox_LTKIUPNG.\n\n?- create_object(Object, soma:'CerealBox', ['map', [0,1,1], [0,0,0.70711,0.70711]], [shape(box(0.1,0.1,0.1))]).\nObject: http://www.ease-crc.org/ont/SOMA.owl#CerealBox_BHVKCONR.\n</code></pre></p>"},{"location":"planning-interface/#query-an-object","title":"Query an object","text":"<p>To get existing objects for a class/type.</p> <pre><code>has_type(-Object, +Class) is nondet.\n</code></pre> <p>Example: <pre><code>has_type(Object, 'http://www.ease-crc.org/ont/SOMA.owl#CerealBox').\nObject: http://www.ease-crc.org/ont/SOMA.owl#CerealBox_LTKIUPNG.\n\nhas_type(Object, 'http://www.ease-crc.org/ont/SUTURO.owl#Apple').\nObject: http://www.ease-crc.org/ont/SUTURO.owl#Apple_LTKIUPNG ;\nObject: http://www.ease-crc.org/ont/SUTURO.owl#Apple_KFJSNPNG ;\nObject: http://www.ease-crc.org/ont/SUTURO.owl#Apple_KLDJKPNG.\n</code></pre></p>"},{"location":"planning-interface/#pose-and-shape-information","title":"Pose and shape information","text":"<p>To get or set the pose of an object, use the following predicate. If an unset variable is passed for <code>PoseStamped</code>, the predicate will try to find a pose in the knowledge base. If the <code>PoseStamped</code> is fully specified, the predicate will set the pose in the knowledge base.</p> <pre><code>object_pose(+Object, ?PoseStamped) is semidet.\n</code></pre> <p>Example: <pre><code>% Get the pose of an object\n?- object_pose('http://www.ease-crc.org/ont/SOMA.owl#Table_LTKIUPNG', PoseStamped)\nPoseStamped: ['map', [1,0,1], [0,0,0,1]]\n\n% Set/Update the pose of an object\n?- object_pose('http://www.ease-crc.org/ont/SOMA.owl#Table_LTKIUPNG', ['map', [2,1,0], [0,0,0,1]])\ntrue.\n</code></pre></p> <p>The documentation of <code>object_shape/5</code> is viewable here. Because of knowrob#368 this is currently not done via <code>object_shape/5</code> but via <code>object_shape_workaround/5</code>.</p> <pre><code>object_shape_workaround(?Obj, ?Frame, ?ShapeTerm, ?Pose, ?Material) is semidet.\n</code></pre> <p>Example: <pre><code>?- object_shape_workaround(soma:'CerealBox', Frame, ShapeTerm, Pose, Material).\nFrame: CerealBox_BHVKCONR,\nMaterial: {'term': ['material', {'term': ['rgba', '_', '_', '_', '_']}]},\nPose: ['CerealBox_BHVKCONR', '_', '_'],\nShapeTerm: {'term': ['box', 0.1, 0.1, 0.1]}.\n</code></pre> Note that this is not the format you will see in lisp, there the <code>term</code> stuff is probably translated to a lispier structure, like <code>(box 0.1 0.1 0.1)</code>. There might be a better predicate for this in the future, and the blanks in the pose might be a real position and rotation in the future. The <code>_</code> indicates that there is no value for this place.</p>"},{"location":"planning-interface/#relative-poses","title":"Relative poses","text":""},{"location":"planning-interface/#inside-of-rooms","title":"Inside of rooms","text":"<p>For all objects the room they are inside of is computed during creation (<code>create_object</code>, is also called during semantic map initialisation) and position updating (<code>object_pose</code> with a given pose). The result of this computation can be retrieved using the following predicate:</p> <pre><code>is_inside_of(?Obj, ?Room)\n</code></pre> <p>Examples: <pre><code>?- is_inside_of(Obj, Room).\nObj: 'http://www.ease-crc.org/ont/SOMA.owl#Table_NDCBRWEY',\nRoom: 'http://www.ease-crc.org/ont/SUTURO.owl#Arena_BQHSDXOM' ;\n\nObj: 'http://www.ease-crc.org/ont/SOMA.owl#Table_NDCBRWEY',\nRoom: 'http://www.ease-crc.org/ont/SUTURO.owl#LivingRoom_DKPLJIOG';\n...\n?- is_inside_of(soma:'Table_NDCBRWEY',Room).\nRoom: 'http://www.ease-crc.org/ont/SUTURO.owl#Arena_BQHSDXOM' ;\n\nRoom: 'http://www.ease-crc.org/ont/SUTURO.owl#LivingRoom_DKPLJIOG'.\n\n?- is_inside_of(Obj, suturo:'LivingRoom_DKPLJIOG').\nObj: 'http://www.ease-crc.org/ont/SOMA.owl#Table_NDCBRWEY' ;\n\nObj: 'http://www.ease-crc.org/ont/SOMA.owl#Table_OKRVGFLP' ;\n\nObj: 'http://www.ease-crc.org/ont/SOMA.owl#Door_EYVRJCHL' ;\n\nObj: 'http://www.ease-crc.org/ont/SOMA.owl#Table_CWYUNSDX'.\n</code></pre></p>"},{"location":"planning-interface/#on-top-of-furniture","title":"On top of Furniture","text":"<p>For all objects, which are not from the semantic map, the furniture (object from the semantic map) they are ontop of is computed during creation (<code>create_object</code>) and position updating (<code>object_pose</code> with a given pose). The result of this computation can be retrieved using triples:</p> <pre><code>triple(Object, soma:isOntopOf, Furniture).\n</code></pre> <p>Example: <pre><code>?- triple(Object, soma:isOntopOf, Furniture)\nFurniture: 'http://www.ease-crc.org/ont/SOMA.owl#Table_NCPFJOBW',\nObject: 'http://www.ease-crc.org/ont/SOMA.owl#CerealBox_GZPBESQD'.\n\n?- triple(Object, soma:isOntopOf, 'http://www.ease-crc.org/ont/SOMA.owl#Table_NCPFJOBW')\nObject: 'http://www.ease-crc.org/ont/SOMA.owl#CerealBox_GZPBESQD'.\n</code></pre></p>"},{"location":"planning-interface/#sorting-objects-by-position","title":"Sorting objects by position","text":"<p><pre><code>sort_right_to_left(+RefereceFrame, +Objects, -SortedObjects) is det.\n</code></pre> Sort a list of objects from right to left (on the y axis from - to +) relative to the reference frame.</p>"},{"location":"planning-interface/#poses-for-robot-interaction","title":"Poses for robot interaction","text":"<p>Gets a position relative to the object based on the type of relation.</p> <p>Valid <code>Type</code>s are </p> <ul> <li><code>perceive</code>: (Optimal) Pose for the robot to position at to perceive the object</li> <li><code>interact</code>: (Optimal) Pose for the robot to position at to interact with the object (eg. grasp with the gripper)</li> <li><code>destination</code>: Returns the destination pose of an object. The destination pose is the pose where the object should be placed based on their predefined locations and current context. The destination might change over time.</li> </ul> <p>Valid entries in the <code>Options</code> list are</p> <ul> <li><code>direction(Dir)</code> with <code>Dir</code> being one of <code>['-x', '+x', '-y', '+y']</code>. This Option specifies the direction from which the robot should approach the object.   For example, if <code>direction('-x')</code> is set, the position will have an x value that is smaller than the x value of the object.   Currently this is only implemented for perceive.   The default is <code>direction('-x')</code>.</li> </ul> <p>This list might be expanded later.</p> <pre><code>object_rel_pose(+Object, +Type, -PoseStamped) is semidet.\nobject_rel_pose(+Object, +Type, +Options, -PoseStamped) is semidet.\n</code></pre> <p>Example: <pre><code>?- object_rel_pose('http://www.ease-crc.org/ont/SOMA.owl#Table_YTORLZXJ', perceive, [direction('-x')], Pose).\nPose: ['iai_kitchen/long_table:table:table_front_edge_center', [-0.7, 0.0, 0.0], [0.0, 0.0, 0.0, 1.0]].\n\n?- object_rel_pose('http://www.ease-crc.org/ont/SOMA.owl#CerealBox_JDHUPSME', destination, Pose).\nPose: ['iai_kitchen/shelf:shelf:shelf_base_center', [0.0, -0.1, 0.51], [0.0, 0.0, 0.0, 1.0]].\n</code></pre></p> <p>For more details, see <code>src/model/object/object_rel_pose/README.md</code>.</p>"},{"location":"planning-interface/#predefined-object-names","title":"Predefined object names","text":"<p>To get the predefined RoboCup name of an object or class or the object class of a RoboCup name, use the following predicates.</p> <pre><code>has_predefined_name(?Class, ?Name) is nondet.\nobject_has_predefined_name(?Object, ?Name) is nondet.\n</code></pre> <p>Example: <pre><code>?- has_predefined_name(Class, 'tomato soup').\nClass: 'http://www.ease-crc.org/ont/SUTURO.owl#TomatoSoupCan'.\n\n?- has_predefined_name(soma:'WineBottle', Name).\nName: red wine.\n\n?- object_has_predefined_name('http://www.ease-crc.org/ont/SUTURO.owl#CerealBoxRoboCup_PCMOTGKZ', Name).\nName: cornflakes.\n\n?- object_has_predefined_name(Object, snacks).\nObject: 'http://www.ease-crc.org/ont/SUTURO.owl#CerealBoxRoboCup_PCMOTGKZ'.\n</code></pre></p>"},{"location":"planning-interface/#robocup-names","title":"Robocup Names","text":"<pre><code>has_robocup_name(?Furniture, ?Name) is nondet.\n</code></pre> <p>Example: <pre><code>?- has_robocup_name(X,kitchen_table).\nX: 'http://www.ease-crc.org/ont/SUTURO.owl#KitchenTable_DJXSUEFR'.\n\n?- has_robocup_name('http://www.ease-crc.org/ont/SOMA.owl#Table_WZOPHBCM',Y).\nY: bed.\n</code></pre></p> <p>Get the knowledge_role assigned to a furniture in the semantic map. Make sure that the knowledge_role in there matches the robocup name.</p>"},{"location":"planning-interface/#predefined-object-locations","title":"Predefined object locations","text":"<p>Get the predefined origin and destination location of object classes. The predefined locations are the location (or reference object) where the object is placed at the beginning of the task or should be placed at the end of the task.</p> <pre><code>predefined_origin_location(+Class, -OriginLocation) is nondet.\npredefined_destination_location(+Class, -DestinationLocation) is nondet.\n</code></pre> <p>Warning</p> <p>For <code>Serving Breakfast</code> the predicate <code>init_serve_breakfast.</code> has to be called first to load/initialize the challenge specific predefined locations. For <code>Storing Groceries</code> the predicate <code>init_storing_groceries.</code>. For <code>Clean the Table</code> the predicate <code>init_clean_the_table.</code>. For <code>GPSR</code> the predicate <code>init_gpsr.</code>.</p> <p>Example: <pre><code>?- predefined_origin_location(soma:'Bowl', OriginLocation).\nOriginLocation: 'http://www.ease-crc.org/ont/SOMA.owl#Shelf_FNSVGYRI'.\n\n?- predefined_destination_location(soma:'Bowl', DestinationLocation).\nDestinationLocation: 'http://www.ease-crc.org/ont/SOMA.owl#Table_BPXIQGES'.\n</code></pre></p>"},{"location":"planning-interface/#next-best-object","title":"Next best object","text":"<p>Gets the next best object to pick based on the current context.</p> <p>This reasoner calculates the next best object to pick based on factors like the distance of the object to the robot and the destination location, the benefit (bonus points) and the confidence of the object detection by Perception.</p> <p>Info</p> <p>For <code>next_object</code> to work, the objects have to be created first with the <code>create_object</code> predicate.</p> <p>Warning</p> <p>For <code>Serving Breakfast</code> the predicate <code>init_serve_breakfast.</code> has to be called first for this to work. For <code>Storing Groceries</code> the predicate <code>init_storing_groceries.</code>. For <code>Clean the Table</code> the predicate <code>init_clean_the_table.</code>.</p> <pre><code>next_object(-Object) is nondet.\n</code></pre> <p>Example: <pre><code>?- next_object(Object).\n\nObject: 'http://www.ease-crc.org/ont/SUTURO.owl#Banana_WRQHESGO'.\n</code></pre></p> <p>Object handled state</p> <p>To update the handled state of an object and remove or add it to the possible next objects, use the following predicates:</p> <p>Set objects to <code>handled=true</code> <pre><code>set_object_handled(+Object) is det.\n</code></pre></p> <p>Example: <pre><code>?- set_object_handled(http://www.ease-crc.org/ont/SUTURO.owl#Banana_WRQHESGO).\ntrue.\n</code></pre></p> <p>Set objects to <code>handled=false</code> <pre><code>set_object_not_handled(+Object) is det.\n</code></pre></p> <p>Example: <pre><code>?- set_object_not_handled(http://www.ease-crc.org/ont/SUTURO.owl#Banana_WRQHESGO).\ntrue.\n</code></pre></p>"},{"location":"planning-interface/#semantic-similarity-measure","title":"Semantic similarity measure","text":"<p>The semantic similarity measure is useful for sorting and grouping objects by similarity or category.</p>"},{"location":"planning-interface/#most-similar-object","title":"Most similar object","text":"<p>Finds the most similar object to the given object from a list of input objects. May also find the Wu-Palmer similarity between the objects.</p> <pre><code>most_similar_object(+Object, +InputObjects, -MostSimilarObject) is semidet.\nmost_similar_object(+Object, +InputObjects, -MostSimilarObject, -Similarity) is semidet.\n</code></pre> <p>Example: <pre><code>?- most_similar_object('http://www.ease-crc.org/ont/SUTURO.owl#Strawberry_FDMTIOJK', ['http://www.ease-crc.org/ont/SOMA.owl#CerealBox_QHUCMGZP', 'http://www.ease-crc.org/ont/SUTURO.owl#Banana_WRQHESGO', 'http://www.ease-crc.org/ont/SOMA.owl#Knife_SZIFXLCO'], Object).\n\nObject: 'http://www.ease-crc.org/ont/SUTURO.owl#Banana_WRQHESGO'.\n\n?- most_similar_object('http://www.ease-crc.org/ont/SUTURO.owl#Strawberry_PQWNGBUF', ['http://www.ease-crc.org/ont/SOMA.owl#CerealBox_VKPYRUIM', 'http://www.ease-crc.org/ont/SUTURO.owl#Tuna_UGDMHTNP'], Object, Similarity, Threshold).\nObject: 'http://www.ease-crc.org/ont/SUTURO.owl#Tuna_UGDMHTNP',\nSimilarity: 0.75,\n</code></pre></p>"},{"location":"planning-interface/#wu-palmer-similarity","title":"Wu-Palmer similarity","text":"<p>Calculates the Wu-Palmer similarity between two classes. The similarity can be 0 &lt; similarity &lt;= 1.  </p> <pre><code>wu_palmer_similarity(+Class1, +Class2, -Similarity) is semidet.\n</code></pre> <p>Example: <pre><code>?- wu_palmer_similarity(suturo:'Banana', suturo:'Strawberry', Similarity).\nSimilarity: 0.875.\n</code></pre></p>"},{"location":"planning-interface/#rooms","title":"Rooms","text":"<p>See the rooms readme.</p>"},{"location":"planning-interface/#utils","title":"Utils","text":""},{"location":"planning-interface/#resetting-the-data","title":"Resetting the data","text":"<p>Delete all objects, what challenge was initiliazied, etc and initialize the semantic map furnitures again.</p> <pre><code>reset_user_data\n</code></pre>"},{"location":"planning-interface/#getting-the-object-for-a-link-name","title":"Getting the object for a link name","text":"<p>This is useful for getting data about specific environment furniture, for example the tall table.</p> <pre><code>has_urdf_name(?Object, ?URDFName) is nondet.\n</code></pre> <p>Example: <pre><code>?- has_urdf_name(Object, URDFName).\nObject: http://knowrob.org/kb/IAI-kitchen.owl#iai_kitchen_fridge_door_handle,\nURDFName: iai_fridge_door_handle ;\n\nObject: http://knowrob.org/kb/IAI-kitchen.owl#iai_kitchen_oven_area_area,\nURDFName: oven_area_area ;\n\nObject: http://www.ease-crc.org/ont/SOMA.owl#Table_LXEIYGPZ,\nURDFName: long_table:table:table_front_edge_center ;\n\nObject: http://www.ease-crc.org/ont/SOMA.owl#Table_MBOLQEWJ,\nURDFName: tall_table:table:table_front_edge_center.\n\n\n% Notice that there are single quotes around the urdf because it contains non [a-z_] characters.\n?- has_urdf_name(Object, 'tall_table:table:table_front_edge_center').\nObject: http://www.ease-crc.org/ont/SOMA.owl#Table_MBOLQEWJ.\n\n\n?- furniture_creation:has_urdf_name('http://www.ease-crc.org/ont/SOMA.owl#Table_MBOLQEWJ', URDFName).\nURDFName: tall_table:table:table_front_edge_center.\n</code></pre></p>"},{"location":"planning-interface/#getting-the-tf-frame","title":"Getting the TF frame","text":"<pre><code>has_tf_name(+Object, -TFName) is semidet.\n</code></pre> <p>Example: <pre><code>?- has_tf_name('tall_table:table:table_front_edge_center',TFName).\nTFName: iai_kitchen/tall_table:table:table_front_edge_center.\n\n\n?- has_tf_name('http://www.ease-crc.org/ont/SOMA.owl#Table_LTKIUPNG', TFName).\nTFName: iai_kitchen/tall_table:table:table_front_edge_center.\n</code></pre></p>"},{"location":"planning-interface/#troubleshooting","title":"Troubleshooting","text":""},{"location":"planning-interface/#drop-roslog-database","title":"Drop roslog database","text":"<p>The roslog MongoDB database used in Knowledge increases relatively fast when working with the HSR. To fix this, drop the roslog database on a regular bases. Execute this in the shell and restart Knowledge. <pre><code>mongo roslog --eval \"db.dropDatabase()\"\n</code></pre></p>"}]}